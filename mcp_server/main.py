# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T15:09:37+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity

from models import (
    OtcerCertificatePostRequest,
    OtcerCertificatePostResponse,
    OtcerCertificatePostResponse1,
    OtcerCertificatePostResponse2,
    OtcerCertificatePostResponse3,
    OtcerCertificatePostResponse4,
    OtcerCertificatePostResponse5,
    OtcerCertificatePostResponse6,
)

app = MCPProxy(
    description='The following issued documents can be integrated with DigiLocker and get used by candidates for service delivery - 1.One Time Verification -OTV certificate ï¿½ issued to candidates qualified for appointment for posts in Govt. Sector to produce to the concerned dept. after scrutinizing their the relevant documents to prove their qualifications, age, etc.2. Admission Tickets for appearing Online, OMR Exams, Physical Test, Interview etc. 3.Departmental Test Certificates- is issued to employees in Govt. sector',
    termsOfService='https://apisetu.gov.in/terms.php',
    title='KERALA PUBLIC SERVICE COMMISSION, Kerala',
    version='3.0.0',
    servers=[{'url': 'https://apisetu.gov.in/keralapsc/v3'}],
)


@app.post(
    '/otcer/certificate',
    description=""" API to verify OTV Certificate. """,
    tags=['certificate_management'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def otcer(body: OtcerCertificatePostRequest = None):
    """
    OTV Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
